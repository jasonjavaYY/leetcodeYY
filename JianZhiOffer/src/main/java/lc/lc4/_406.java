package lc.lc4;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

/*
* 根据身高重建队列
*
* 假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki]
* 表示第 i 个人的身高为 hi ，前面正好有 ki 个身高大于或等于 hi 的人。
请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj]
* 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。
示例 1：
输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
示例 2：
输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
*
* 方法二：从高到低考虑
将每个人按照身高从大到小进行排序，处理身高相同的人使用的方法类似，即：按照 h_i为第一关键字降序，k_i为第二关键字升序进行排序。
* 如果我们按照排完序后的顺序，依次将每个人放入队列中，那么当我们放入第 i 个人时：第 0,⋯,i−1 个人已经在队列中被安排了位置，
* 他们只要站在第 i 个人的前面，就会对第 i 个人产生影响，因为他们都比第 i 个人高；而第 i+1,⋯,n−1 个人还没有被放入队列中，
* 并且他们无论站在哪里，对第 i 个人都没有任何影响，因为他们都比第 i 个人矮。我们可以发现，后面的人既然不会对第 i 个人造成影响，
* 我们可以采用「插空」的方法，依次给每一个人在当前的队列中选择一个插入的位置。当我们放入第 i 个人时，只需将其插入队列，使他前面恰好有 k_i个人。
* */
//数组 一群人乱序站成队people，people[i]=[hi, ki]，第i人高hi，前面有ki个身高≥hi的人。
//请返回真实队列顺序queue，其中 queue[j] = [hj,kj]
//输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
//输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
public class _406 {
    public int[][] reconstructQueue(int[][] people) {
        //对原数组排序，按hi为第一关键字降序，ki为第二关键字升序
        Arrays.sort(people, new Comparator<int[]>() {
            public int compare(int[] person1, int[] person2) {
                if (person1[0] != person2[0]) {//降序是var2-var1
                    return person2[0] - person1[0];
                } else {//升序是var1-var2
                    return person1[1] - person2[1];
                }
            }
        });
        List<int[]> ans = new ArrayList<int[]>();//构造结果数组
        for (int[] person : people) {//遍历排序后的people数组
            //将person插入身高的index位置
            ans.add(person[1], person);
        }//将ans转换成数组返回
        return ans.toArray(new int[ans.size()][]);
    }
}

package lc.lc4;

/*
* 最长回文串
*
* 给定一个包含大写字母和小写字母的字符串 s ，返回 通过这些字母构造成的 最长的回文串 。
在构造过程中，请注意 区分大小写 。比如 "Aa" 不能当做一个回文字符串。
示例 1:
输入:s = "abccccdd"
输出:7
解释:
我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。
示例 2:
输入:s = "a"
输入:1
*
* 在一个回文串中，只有最多一个字符出现了奇数次，其余的字符都出现偶数次。那么我们可以将每个字符使用偶数次，使得它们根据回文中心对称。
* 在这之后，如果有剩余的字符，我们可以再取出一个，作为回文中心。
对于每个字符 ch，假设它出现了 v 次，我们可以使用该字符 v / 2 * 2 次，在回文串的左侧和右侧分别放置 v / 2 个字符 ch，其中 / 为整数除法。
* 例如若 "a" 出现了 5 次，那么我们可以使用 "a" 的次数为 4，回文串的左右两侧分别放置 2 个 "a"。
如果有任何一个字符 ch 的出现次数 v 为奇数（即 v % 2 == 1），那么可以将这个字符作为回文中心，注意只能最多有一个字符作为回文中心。
* 在代码中，我们用 ans 存储回文串的长度，由于在遍历字符时，ans 每次会增加 v / 2 * 2，因此 ans 一直为偶数。
* 但在发现了第一个出现次数为奇数的字符后，我们将 ans 增加 1，这样 ans 变为奇数，在后面发现其它出现奇数次的字符时，我们就不改变 ans 的值了。
* */
//给一个包含大小写字母字符串s，返回通过这些字母构造成的最长回文串
public class _409 {
    public int longestPalindrome(String s) {
        //统计每个字符出现多少次，其实用不了128，128比较方便
        int[] count = new int[128];
        int length = s.length();//获取字符串长度
        for (int i = 0; i < length; ++i) {
            char c = s.charAt(i);//遍历字符串每个字符
            count[c]++;//字符的asc码处值++
        }
        int ans = 0;//最长回文串长度
        for (int v : count) {//遍历count数组
            ans += v / 2 * 2; // v/2*2就是把所有双数字符用来构成回文
            //针对剩余的所有奇数个字符，最多只能再加上一个，
            if (v % 2 == 1 && ans % 2 == 0) {
                ans++;//因此如果v是奇数并且ans是偶数，就给ans++
            }
        }
        return ans;//返回ans
    }
}

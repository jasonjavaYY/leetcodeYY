package lc.lc3;

/*
* 打家劫舍
*
* 你是一个专业小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
* 如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算不触动警报装置的情况下 ，
* 一夜之内能够偷窃到的最高金额。
示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
*
* 方法一：动态规划
如果只有一间房屋则偷窃，可以偷窃到最高总金额。如果只有两间房屋，则由于两间房屋相邻，不能同时偷窃，只能偷窃其中的一间房屋，
* 因此选择其中金额较高的房屋进行偷窃，可以偷窃到最高总金额。
如果房屋数量大于两间，对于第 k (k>2) 间房屋，有两个选项：
偷窃第 k 间房屋，那么就不能偷窃第 k−1 间房屋，偷窃总金额为前 k−2 间房屋的最高总金额与第 k 间房屋的金额之和。
不偷窃第 k 间房屋，偷窃总金额为前 k−1 间房屋的最高总金额。
在两个选项中选择偷窃总金额较大的选项，该选项对应的偷窃总金额即为前 k 间房屋能偷窃到的最高总金额。
用 dp[i] 表示前 i 间房屋能偷窃到的最高总金额，那么就有如下的状态转移方程：
dp[i]=max(dp[i−2]+nums[i],dp[i−1])
边界条件为：
dp[0]=nums[0]                只有一间房屋，则偷窃该房屋
dp[1]=max(nums[0],nums[1])   只有两间房屋，选择其中金额较高的房屋进行偷窃
最终的答案即为 dp[i - 1]，其中 n 是数组的长度。
* */
//每间房有一定现金，如果相邻房同一晚被偷会报警。给代表每个房屋金额的非负整数数组，计算不报警能偷到最高金额
public class _198 {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {//如果数组为空，返回0
            return 0;
        }
        int length = nums.length;
        if (length == 1) { //如果只有一家，偷他家就是最高收益
            return nums[0];
        }//dp[i]表示前 i 间屋能偷到的最高总金额
        int[] dp = new int[length]; //构造dp
        dp[0] = nums[0]; //第0家能偷到的最高金额就是nums[0]
        //只有两间屋，选金额较高的房屋偷窃
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < length; i++) {//i从2开始
            //偷第i间屋就不能偷第i−1间屋，总金额为dp[i-2]+nums[i],不偷第i间，总金额为dp[i-1]
            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[length - 1];//返回dp[i - 1]
    }
}

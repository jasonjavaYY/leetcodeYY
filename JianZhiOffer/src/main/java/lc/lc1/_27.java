package lc.lc1;

/*
* 移除元素
*
* 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
* 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
* 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
*
* 示例 1：
输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，
* 而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
示例 2：
输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。不需要考虑数组中超出新长度后面的元素。
*
* 双指针解法
本解法的思路与 【题解】26. 删除排序数组中的重复项 中的「双指针解法」类似。
根据题意，我们可以将数组分成「前后」两段：前半段是有效部分，存储的是不等于 val 的元素。
后半段是无效部分，存储的是等于 val 的元素。最终答案返回有效部分的结尾下标。
* */
public class _27 {
    public int removeElement(int[] nums, int val) {
        int j = nums.length - 1;
        for (int i = 0; i <= j; i++) {
            if (nums[i] == val) {
                swap(nums, i--, j--);
            }
        }
        return j + 1;
    }

    void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}

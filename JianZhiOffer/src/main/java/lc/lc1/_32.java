package lc.lc1;

import java.util.Deque;
import java.util.LinkedList;

/*
* 最长有效括号
*
* 给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。
示例 1：
输入：s = "(()"
输出：2
解释：最长有效括号子串是 "()"
示例 2：
输入：s = ")()())"
输出：4
解释：最长有效括号子串是 "()()"
示例 3：
输入：s = ""
输出：0
*
* 方法二：栈
可以在遍历给定字符串的过程中去判断到目前为止扫描的子串的有效性，同时能得到最长有效括号的长度。
具体做法是我们始终保持栈底元素为当前已经遍历过的元素中「最后一个没有被匹配的右括号的下标」，这样的做法主要是考虑了边界条件的处理，
* 栈里其他元素维护左括号的下标：对于遇到的每个 ‘(’ ，我们将它的下标放入栈中，对于遇到的每个 ‘)’ ，我们先弹出栈顶元素表示匹配了当前右括号：
如果栈为空，说明当前的右括号为没有被匹配的右括号，我们将其下标放入栈中来更新我们之前提到的「最后一个没有被匹配的右括号的下标」
如果栈不为空，当前右括号的下标减去栈顶元素即为「以该右括号为结尾的最长有效括号的长度」，我们从前往后遍历字符串并更新答案即可。
* 需要注意的是，如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，这样就不满足提及的「最后一个没有被匹配的右括号的下标」，
* 为了保持统一，我们在一开始的时候往栈中放入一个值为 -1 的元素。
* */
//栈 一个只包含 '(' 和 ')' 字符串，找出最长有效（格式正确且连续）括号子串长度
public class _32 {
    public int longestValidParentheses(String s) {
        int maxans = 0; //保存结果
        Deque<Integer> stack = new LinkedList<Integer>(); //构造一个辅助栈
        stack.push(-1); //栈先放入-1，所以正常匹配栈不应该为空
        for (int i = 0; i < s.length(); i++) {//遍历字符串
            if (s.charAt(i) == '(') { //如果字符串当前字符是左括号
                stack.push(i); //将字符下标入栈
            } else { //如果是右括号
                stack.pop(); //弹栈
                if (stack.isEmpty()) { //弹栈后如果栈为空，将下标再入栈
                    stack.push(i);
                } else { //如果栈不为空，比较i-栈顶元素和当前最大值，更新最大值
                    maxans = Math.max(maxans, i - stack.peek());
                }
            }
        }
        return maxans; //最后返回最大值
    }
}

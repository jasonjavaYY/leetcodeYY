package lc.lc1;

/*
* 缺失的第一个正数
*
* 给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。
示例 1：
输入：nums = [1,2,0]
输出：3
示例 2：
输入：nums = [3,4,-1,1]
输出：2
示例 3：
输入：nums = [7,8,9,11,12]
输出：1
*
*对于一个长度为 N 的数组，其中没有出现的最小正整数只能在[1,N+1] 中。这是因为如果 [1,N] 都出现了，那么答案是N+1，否则答案是 [1,N] 中没有出现的最小正整数。
*我们对数组进行遍历，对于遍历到的数x，如果它在[1,N]范围内，那么就将数组中的第x−1 个位置（注意：数组下标从0 开始）打「标记」。
* 在遍历结束之后，如果所有的位置都被打上了标记，那么答案是N+1，否则答案是最小的没有打上标记的位置加 1。
* 由于我们只在意 [1,N] 的数，因此我们可以先对数组进行遍历，把不在[1,N] 范围内的数修改成任意一个大于N 的数（例如N+1）。
* 这样一来，数组中的所有数都是正数了，因此我们就可以将「标记」表示为「负号」。算法的流程如下：
* 我们将数组中所有小于等于 0 的数修改为 N+1；我们遍历数组中的每一个数x，它可能已经被打了标记,如果∣x∣∈[1,N]，
* 那么我们给数组中的第∣x∣−1位置的数添加一个负号。如果它已经有负号，不需要重复添加；
* 在遍历完成之后，如果数组中的每一个数都是负数，那么答案是N+1，否则答案是第一个正数的位置加 1。
* */
public class _41 {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            if (nums[i] <= 0) {
                nums[i] = n + 1;
            }
        }
        for (int i = 0; i < n; ++i) {
            int num = Math.abs(nums[i]);
            if (num <= n) {
                nums[num - 1] = -Math.abs(nums[num - 1]);
            }
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                return i + 1;
            }
        }
        return n + 1;
    }
}

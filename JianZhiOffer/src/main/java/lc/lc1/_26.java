package lc.lc1;

/*
* 删除有序数组中的重复项
*
* 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。
* 将最终结果插入 nums 的前 k 个位置后返回 k 。不要使用额外的空间，必须在原地修改输入数组 并在使用 O(1) 额外空间的条件下完成。
*
* 示例 1：
输入：nums = [1,1,2]
输出：2, nums = [1,2,_]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例 2：
输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
*
* 解法： 双指针
首先注意数组是有序的，那么重复的元素一定会相邻。要求删除重复元素，实际上就是将不重复的元素移到数组的左侧。
* 考虑用 2 个指针，一个在前记作 p，一个在后记作 q，算法流程如下：
* 1.比较 p 和 q 位置的元素是否相等。如果相等，q 后移 1 位如果不相等，将 q 位置的元素复制到 p+1 位置上，p 后移一位，q 后移 1 位
* 重复上述过程，直到 q 等于数组长度。返回 p + 1，即为新数组长度。
* */
//一个升序数组nums，原地删除重复元素，使每个元素只出现一次
public class _26 {
    public int removeDuplicates(int[] nums) {
        //如果原数组为空，返回新长度是0
        if (nums == null || nums.length == 0) return 0;
        //数组有序那么重复元素一定相邻。删除重复元素就是将不重复元素移到数组左侧
        int p = 0; //构造两个指针
        int q = 1;
        while (q < nums.length) { //循环判断q不能越界
            //如果值不相等，将q位置元素复制到p+1位置，p和q都++
            if (nums[p] != nums[q]) {
                nums[p + 1] = nums[q];
                p++;
            } //如果p和q指向的数值相等，就后移q一位继续判断
            q++;
        }
        return p + 1; //最后返回p+1就是去重后的长度
    }
}

package lc.lc1;

/*
* x 的平方根
*
* 给你一个非负整数 x ，计算并返回 x 的算术平方根 。结果只保留整数部分 ，小数部分被舍去 。
示例 1：
输入：x = 4
输出：2
示例 2：
输入：x = 8
输出：2
解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。
*
* 方法二：二分查找
由于 x 平方根的整数部分 ans 是满足 k2≤x 的最大 k 值，因此我们可以对 k 进行二分查找从而得到答案。
二分查找的下界为 0，上界可以粗略地设定为 x。在二分查找的每一步中，只需要比较中间元素 mid 的平方与 x 的大小关系，
* 并通过比较的结果调整上下界的范围。由于我们所有的运算都是整数运算，因此在得到最终的答案ans 后，也就不需要再去尝试 ans+1 了。
 * */
public class _69 {
    public int mySqrt(int x) {
        int l = 0, r = x, ans = -1; //二分从0找到x
        while (l <= r) { //二分循环判断条件
            int mid = l + (r - l) / 2; //求mid
            if ((long) mid * mid <= x) { //如果mid平方≤x，更新ans和l
                ans = mid;
                l = mid + 1;
            } else { //否则更新r
                r = mid - 1;
            }
        }
        return ans; //最后返回ans
    }
}

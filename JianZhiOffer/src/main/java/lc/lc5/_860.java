package lc.lc5;

/*
* 柠檬水找零
*
* 每杯柠檬水售价为 5 美元。顾客排队购买，（按账单 bills 支付的顺序）一次购买一杯。
每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
注意，一开始你手头没有任何零钱。
给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。
示例 1：
输入：bills = [5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。
示例 2：
输入：bills = [5,5,10,10,20]
输出：false
解释：
前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
由于不是每位顾客都得到了正确的找零，所以答案是 false。
*
* 方法一：贪心
由于顾客只能给三个面值，而我们一开始没有任何钞票，因此我们拥有的钞票面值只可能是 5 ，10 和 20 三种。我们可以进行如下分类讨论。
5 美元，由于柠檬水价格也为 5 美元，因此直接收下。
10 美元，我们需要找回 5 美元，如果没有 5 美元面值的钞票，则无法正确找零。
20 美元，我们需要找回 15 美元，有两种组合方式，一种是一张 10 美元和 5 美元的钞票，一种是 3 张 5 美元的钞票，如果两种方式都没有，则无法找零。
* 当可以找零时，两种方式我们更倾向第一种，即如果存在 5 和 10 美元，我们就按第一种方式找零，否则按第二种方式找零，我们需尽可能保留 5 美元钞票。
基于此，维护两个变量 five 和 ten 表示当前手中拥有的 5 美元和 10 美元钞票的张数，从前往后遍历数组分类讨论即可。
* */
//每杯水5。顾客一次买一杯付5、10或20。数组bills，bills[i]是第i顾客付的账，判断能否给每个顾客正确找零，开始没有零钱
public class _860 {
    public boolean lemonadeChange(int[] bills) {
        int five = 0, ten = 0;//变量five和ten表示手中的5元和10元钞票数
        for (int bill : bills) {//遍历每次付款
            if (bill == 5) {//如果付5，不找零，且five++
                five++;
            } else if (bill == 10) {//如果付10
                if (five == 0) {//如果当前没有5原，返回false
                    return false;
                }//否则five--，ten++
                five--;
                ten++;
            } else {//如果付20
                if (five > 0 && ten > 0) {//如果同时有5和10，就找零5和10
                    five--;
                    ten--;
                } else if (five >= 3) {//否则如果有不少于3张5，找零3个5
                    five -= 3;
                } else {//否则返回false
                    return false;
                }
            }
        }
        return true;//遍历结束返回true
    }
}
